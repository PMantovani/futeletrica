generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Athlete {
  id            BigInt              @id @default(autoincrement())
  name          String
  initialRating Float               @default(0)
  rating        Float               @default(0)
  createdAt     DateTime            @default(now()) @db.Timestamptz(6)
  position      Position
  rosters       AthletesOnRosters[]
  flagPlaying   Boolean             @default(true)
}

model Game {
  id         BigInt       @id @default(autoincrement())
  gameDate   DateTime     @db.Timestamptz(6)
  createdAt  DateTime?    @default(now()) @db.Timestamptz(6)
  GameResult GameResult[]
  Roster     Roster[]
}

model GameResult {
  id        BigInt   @id(map: "GameResults_pkey") @default(autoincrement())
  gameId    BigInt
  color1    Color
  color2    Color
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  goals1    Int      @db.SmallInt
  goals2    Int      @db.SmallInt
  match     Int      @db.SmallInt
  Game      Game     @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Roster {
  id        BigInt              @id(map: "Rooster_pkey") @default(autoincrement())
  gameId    BigInt?
  color     Color
  createdAt DateTime?           @default(now()) @db.Timestamptz(6)
  Game      Game?               @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  athletes  AthletesOnRosters[]
}

model AthletesOnRosters {
  roster    Roster  @relation(fields: [rosterId], references: [id], onDelete: Cascade)
  rosterId  BigInt
  athlete   Athlete @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  athleteId BigInt

  @@id([rosterId, athleteId])
}

enum Color {
  white
  yellow
  blue
}

enum Position {
  ZAG
  VOL
  MEI
  ATA
}
